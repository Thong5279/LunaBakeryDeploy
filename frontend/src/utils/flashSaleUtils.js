// Utility functions cho Flash Sale
import { useSelector } from 'react-redux';

// L·∫•y active flash sales t·ª´ Redux store
export const getActiveFlashSales = (state) => {
  return state.flashSale.activeFlashSales || [];
};

// T√≠nh to√°n gi√° hi·ªÉn th·ªã cho s·∫£n ph·∫©m c√≥ flash sale
export const calculateProductDisplayPrice = (product, activeFlashSales = [], selectedSize = null) => {
  if (!product || !activeFlashSales || activeFlashSales.length === 0) {
    // Kh√¥ng c√≥ flash sale, t√≠nh gi√° theo size
    let basePrice = product?.discountPrice || product?.price || 0;
    
    if (product?.sizePricing && selectedSize) {
      const sizePrice = product.sizePricing.find(sp => sp.size === selectedSize);
      if (sizePrice) {
        basePrice = sizePrice.discountPrice || sizePrice.price;
      }
    }
    
    return {
      displayPrice: basePrice,
      originalPrice: product?.price || 0,
      isFlashSale: false,
      discountPercent: 0,
      flashSaleInfo: null
    };
  }

  // T√¨m flash sale cho s·∫£n ph·∫©m n√†y
  for (const flashSale of activeFlashSales) {
    if (flashSale.status === 'active' && flashSale.products) {
      const flashSaleProduct = flashSale.products.find(fp => 
        fp.productId._id === product._id || fp.productId === product._id
      );
      
      if (flashSaleProduct && flashSaleProduct.soldQuantity < flashSaleProduct.quantity) {
        // C√≥ flash sale cho s·∫£n ph·∫©m n√†y
        let displayPrice = flashSaleProduct.salePrice;
        
        // N·∫øu c√≥ size ƒë∆∞·ª£c ch·ªçn, t√≠nh gi√° flash sale d·ª±a tr√™n gi√° size
        if (product.sizePricing && selectedSize) {
          const sizePrice = product.sizePricing.find(sp => sp.size === selectedSize);
          if (sizePrice) {
            const sizeBasePrice = sizePrice.discountPrice || sizePrice.price;
            
            // T√≠nh to√°n gi√° flash sale cho size ƒë∆∞·ª£c ch·ªçn
            if (flashSale.discountType === 'percentage') {
              // Gi·∫£m gi√° theo % - √°p d·ª•ng % gi·∫£m cho gi√° size
              const discountPercent = (flashSaleProduct.originalPrice - flashSaleProduct.salePrice) / flashSaleProduct.originalPrice;
              displayPrice = Math.round(sizeBasePrice * (1 - discountPercent));
            } else {
              // Gi·∫£m gi√° theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh - tr·ª´ tr·ª±c ti·∫øp s·ªë ti·ªÅn gi·∫£m
              const discountAmount = flashSaleProduct.originalPrice - flashSaleProduct.salePrice;
              displayPrice = Math.max(0, sizeBasePrice - discountAmount);
            }
          }
        }
        
        const discountPercent = Math.round(
          ((flashSaleProduct.originalPrice - flashSaleProduct.salePrice) / flashSaleProduct.originalPrice) * 100
        );
        
        return {
          displayPrice,
          originalPrice: flashSaleProduct.originalPrice,
          isFlashSale: true,
          discountPercent,
          flashSaleInfo: {
            id: flashSale._id,
            endDate: flashSale.endDate,
            remainingQuantity: flashSaleProduct.quantity - flashSaleProduct.soldQuantity
          }
        };
      }
    }
  }

  // Kh√¥ng c√≥ flash sale, t√≠nh gi√° theo size
  let basePrice = product?.discountPrice || product?.price || 0;
  
  if (product?.sizePricing && selectedSize) {
    const sizePrice = product.sizePricing.find(sp => sp.size === selectedSize);
    if (sizePrice) {
      basePrice = sizePrice.discountPrice || sizePrice.price;
    }
  }
  
  return {
    displayPrice: basePrice,
    originalPrice: product?.price || 0,
    isFlashSale: false,
    discountPercent: 0,
    flashSaleInfo: null
  };
};

// T√≠nh to√°n gi√° hi·ªÉn th·ªã cho nguy√™n li·ªáu c√≥ flash sale
export const calculateIngredientDisplayPrice = (ingredient, activeFlashSales = []) => {
  if (!ingredient || !activeFlashSales || activeFlashSales.length === 0) {
    return {
      displayPrice: ingredient?.discountPrice || ingredient?.price || 0,
      originalPrice: ingredient?.price || 0,
      isFlashSale: false,
      discountPercent: 0,
      flashSaleInfo: null
    };
  }

  // T√¨m flash sale cho nguy√™n li·ªáu n√†y
  for (const flashSale of activeFlashSales) {
    if (flashSale.status === 'active' && flashSale.ingredients) {
      const flashSaleIngredient = flashSale.ingredients.find(fi => 
        fi.ingredientId._id === ingredient._id || fi.ingredientId === ingredient._id
      );
      
      if (flashSaleIngredient && flashSaleIngredient.soldQuantity < flashSaleIngredient.quantity) {
        // C√≥ flash sale cho nguy√™n li·ªáu n√†y
        const discountPercent = Math.round(
          ((flashSaleIngredient.originalPrice - flashSaleIngredient.salePrice) / flashSaleIngredient.originalPrice) * 100
        );
        
        return {
          displayPrice: flashSaleIngredient.salePrice,
          originalPrice: flashSaleIngredient.originalPrice,
          isFlashSale: true,
          discountPercent,
          flashSaleInfo: {
            id: flashSale._id,
            endDate: flashSale.endDate,
            remainingQuantity: flashSaleIngredient.quantity - flashSaleIngredient.soldQuantity
          }
        };
      }
    }
  }

  // Kh√¥ng c√≥ flash sale, tr·∫£ v·ªÅ gi√° th∆∞·ªùng
  return {
    displayPrice: ingredient?.discountPrice || ingredient?.price || 0,
    originalPrice: ingredient?.price || 0,
    isFlashSale: false,
    discountPercent: 0,
    flashSaleInfo: null
  };
};

// Hook ƒë·ªÉ l·∫•y gi√° flash sale cho s·∫£n ph·∫©m
export const useProductFlashSalePrice = (product, selectedSize = null) => {
  const activeFlashSales = useSelector(state => state.flashSale.activeFlashSales || []);
  return calculateProductDisplayPrice(product, activeFlashSales, selectedSize);
};

// Hook ƒë·ªÉ l·∫•y gi√° flash sale cho nguy√™n li·ªáu
export const useIngredientFlashSalePrice = (ingredient) => {
  const activeFlashSales = useSelector(state => state.flashSale.activeFlashSales || []);
  return calculateIngredientDisplayPrice(ingredient, activeFlashSales);
};

// Format gi√° ti·ªÅn
export const formatPrice = (price) => {
  return new Intl.NumberFormat('vi-VN').format(price) + ' ‚Ç´';
};

// Ki·ªÉm tra flash sale c√≥ c√≤n ho·∫°t ƒë·ªông kh√¥ng
export const isFlashSaleActive = (flashSale) => {
  if (!flashSale) return false;
  
  const now = new Date();
  const startDate = new Date(flashSale.startDate);
  const endDate = new Date(flashSale.endDate);
  
  return now >= startDate && now <= endDate && flashSale.status === 'active';
};

// T√≠nh th·ªùi gian c√≤n l·∫°i c·ªßa flash sale
export const getTimeRemaining = (endDate) => {
  const end = new Date(endDate);
  const now = new Date();
  const diff = end - now;
  
  console.log('üïê getTimeRemaining Debug:', {
    endDate,
    end: end.toISOString(),
    now: now.toISOString(),
    diff,
    diffHours: diff / (1000 * 60 * 60)
  });
  
  if (diff <= 0) return 'ƒê√£ k·∫øt th√∫c';
  
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);
  
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}; 