const mongoose = require('mongoose');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('‚úÖ Connected to MongoDB'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

const FlashSale = require('./models/FlashSale');
const Cart = require('./models/Cart');

async function testDirectCleanup() {
  try {
    console.log('üß™ Testing Direct Flash Sale Cleanup');
    
    // T√¨m flash sale ƒë·ªÉ test
    let flashSale;
    const flashSaleId = '6873d8dedc4311a81507de4b'; // Thay b·∫±ng ID th·∫≠t t·ª´ test tr∆∞·ªõc
    flashSale = await FlashSale.findById(flashSaleId);
    
    if (!flashSale) {
      console.log('‚ùå Flash sale not found, trying to find any flash sale...');
      const allFlashSales = await FlashSale.find({});
      if (allFlashSales.length > 0) {
        flashSale = allFlashSales[0];
        console.log(`‚úÖ Found flash sale: ${flashSale.name} (${flashSale._id})`);
      } else {
        console.log('‚ùå No flash sales found');
        return;
      }
    }
    
    console.log(`üîç Testing Flash Sale: ${flashSale.name}`);
    console.log(`   Status: ${flashSale.status}`);
    console.log(`   Products: ${flashSale.products.length}`);
    console.log(`   Ingredients: ${flashSale.ingredients.length}`);
    
    // L·∫•y danh s√°ch s·∫£n ph·∫©m v√† nguy√™n li·ªáu trong flash sale
    const flashSaleProductIds = flashSale.products.map(p => p.productId.toString());
    const flashSaleIngredientIds = flashSale.ingredients.map(i => i.ingredientId.toString());

    console.log('üîç Flash Sale Products:', flashSaleProductIds);
    console.log('üîç Flash Sale Ingredients:', flashSaleIngredientIds);

    // T√¨m t·∫•t c·∫£ gi·ªè h√†ng c√≥ ch·ª©a s·∫£n ph·∫©m flash sale
    const cartsWithFlashSaleItems = await Cart.find({
      'products.productId': { 
        $in: [...flashSaleProductIds, ...flashSaleIngredientIds] 
      }
    });

    console.log(`üì¶ Found ${cartsWithFlashSaleItems.length} carts with flash sale items`);

    if (cartsWithFlashSaleItems.length === 0) {
      console.log('‚úÖ No carts to cleanup');
      return;
    }

    let cleanedCarts = 0;
    let removedItems = 0;

    for (const cart of cartsWithFlashSaleItems) {
      console.log(`\nüõí Processing Cart ${cart._id}:`);
      console.log(`   User: ${cart.user || 'Guest'}`);
      console.log(`   Items before: ${cart.products.length}`);
      console.log(`   Total Price before: ${cart.totalPrice}`);
      
      let cartUpdated = false;
      const originalProducts = [...cart.products];
      
      cart.products = cart.products.filter(item => {
        const itemProductId = item.productId.toString();
        const isFlashSaleProduct = flashSaleProductIds.includes(itemProductId);
        const isFlashSaleIngredient = flashSaleIngredientIds.includes(itemProductId);
        
        if (isFlashSaleProduct || isFlashSaleIngredient) {
          console.log(`   üóëÔ∏è Removing item: ${item.name} (${itemProductId})`);
          removedItems++;
          cartUpdated = true;
          return false;
        }
        return true;
      });

      if (cartUpdated) {
        cart.totalPrice = cart.products.reduce((total, item) => total + (item.price * item.quantity), 0);
        await cart.save();
        cleanedCarts++;
        console.log(`   ‚úÖ Updated cart: ${originalProducts.length - cart.products.length} items removed`);
        console.log(`   Items after: ${cart.products.length}`);
        console.log(`   Total Price after: ${cart.totalPrice}`);
      } else {
        console.log(`   ‚è≠Ô∏è No changes needed`);
      }
    }

    console.log(`\nüßπ Cleanup completed: ${cleanedCarts} carts, ${removedItems} items`);

  } catch (error) {
    console.error('‚ùå Error during direct cleanup test:', error);
  } finally {
    console.log('\nüîå Disconnected from MongoDB');
    mongoose.disconnect();
  }
}

// Ch·∫°y test
testDirectCleanup(); 