// Script t·ª± ƒë·ªông cleanup flash sale ƒë√£ k·∫øt th√∫c
const mongoose = require('mongoose');
require('dotenv').config();

const cleanupFlashSales = async () => {
  try {
    // K·∫øt n·ªëi database
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connected to MongoDB');

    const FlashSale = require('./models/FlashSale');
    const Cart = require('./models/Cart');

    const now = new Date();
    console.log('üïê Current time:', now.toISOString());
    
    // T√¨m t·∫•t c·∫£ flash sale ƒë√£ k·∫øt th√∫c
    const expiredFlashSales = await FlashSale.find({
      endDate: { $lt: now },
      status: { $ne: 'expired' }
    });

    console.log(`üïê Found ${expiredFlashSales.length} expired flash sales`);

    if (expiredFlashSales.length === 0) {
      console.log('‚úÖ No expired flash sales to cleanup');
      return;
    }

    let totalCleanedCarts = 0;
    let totalRemovedItems = 0;

    for (const flashSale of expiredFlashSales) {
      console.log(`üßπ Processing flash sale: ${flashSale.name}`);
      
      // C·∫≠p nh·∫≠t status th√†nh expired
      flashSale.status = 'expired';
      await flashSale.save();
      console.log(`‚úÖ Updated status to expired for: ${flashSale.name}`);

      // L·∫•y danh s√°ch s·∫£n ph·∫©m v√† nguy√™n li·ªáu trong flash sale
      const flashSaleProductIds = flashSale.products.map(p => p.productId.toString());
      const flashSaleIngredientIds = flashSale.ingredients.map(i => i.ingredientId.toString());

      // T√¨m t·∫•t c·∫£ gi·ªè h√†ng c√≥ ch·ª©a s·∫£n ph·∫©m flash sale
      const cartsWithFlashSaleItems = await Cart.find({
        $or: [
          { 'products.productId': { $in: flashSaleProductIds } },
          { 'products.ingredientId': { $in: flashSaleIngredientIds } }
        ]
      });

      console.log(`üõí Found ${cartsWithFlashSaleItems.length} carts with flash sale items`);

      for (const cart of cartsWithFlashSaleItems) {
        let cartUpdated = false;
        
        // L·ªçc ra c√°c item kh√¥ng ph·∫£i flash sale
        cart.products = cart.products.filter(item => {
          const isFlashSaleProduct = flashSaleProductIds.includes(item.productId?.toString());
          const isFlashSaleIngredient = flashSaleIngredientIds.includes(item.ingredientId?.toString());
          
          if (isFlashSaleProduct || isFlashSaleIngredient) {
            totalRemovedItems++;
            cartUpdated = true;
            console.log(`üóëÔ∏è Removed item from cart: ${item.name || 'Unknown'}`);
            return false;
          }
          return true;
        });

        // C·∫≠p nh·∫≠t t·ªïng gi√°
        if (cartUpdated) {
          cart.totalPrice = cart.products.reduce((total, item) => total + (item.price * item.quantity), 0);
          await cart.save();
          totalCleanedCarts++;
          console.log(`‚úÖ Updated cart for user: ${cart.user}`);
        }
      }
    }

    console.log(`üßπ Cleanup completed:`);
    console.log(`  - Expired flash sales: ${expiredFlashSales.length}`);
    console.log(`  - Cleaned carts: ${totalCleanedCarts}`);
    console.log(`  - Removed items: ${totalRemovedItems}`);

  } catch (error) {
    console.error('‚ùå Error during cleanup:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
};

// Ch·∫°y cleanup
cleanupFlashSales(); 